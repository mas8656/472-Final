TurtleBot Secure Location Messaging System
A secure communication system that allows TurtleBots to transmit location data over a network using HMAC-signed UDP messages.
Overview
This project implements a secure location reporting system with:

Sender Script (sender.py) - Transmits signed location data from TurtleBots
Receiver Script (receiver.py) - Verifies, acknowledges, and stores location data in Redis

The system uses HMAC-SHA256 signatures to ensure message integrity and authenticity.
Features

Secure message signing with HMAC-SHA256
Support for multicast UDP communication
Redis-based storage for location history
Message acknowledgment system
Configurable through JSON configuration file

Prerequisites

Python 3.6+
Redis server (for receiver only)
Network connectivity between sender and receiver

Setup Instructions
Sender Setup

Clone the repository
bashgit clone <repository-url>
cd <repository-name>

Create and activate a Python virtual environment
bashsudo apt install python3 python3-pip -y
python3 -m venv sender_env
source sender_env/bin/activate

Run the sender script
bashpython3 sender.py

Follow the prompts to input coordinates

Enter numeric X and Y values
The script will create and send signed messages
You'll receive confirmation for each message sent



Receiver Setup

Clone the repository
bashgit clone <repository-url>
cd <repository-name>

Create and activate a Python virtual environment
bashsudo apt install python3 python3-pip -y
python3 -m venv receiver_env
source receiver_env/bin/activate

Install required packages
bashpip install redis

Start Redis server
bashredis-server

Run the receiver script
bashpython3 receiver.py


Configuration
You can override default values by creating a config.json file in the same directory:
json{
  "multicast_group": "239.1.1.1",
  "multicast_port": 5005,
  "secret_key": "turtlebot3_secret_key",
  "redis": {
    "host": "localhost",
    "port": 6379
  }
}
If this file is not found or is invalid, default values will be used.
Checking Stored Data
After messages are received, you can check the stored data in Redis:
bashredis-cli
HGETALL turtlebot:turtlebot_1
Important Notes

Both sender and receiver must use the same SECRET_KEY for HMAC verification
Ensure sender and receiver are on the same network/subnet
Some firewalls or routers may require configuration for multicast traffic
Redis must be running before launching the receiver
