# TurtleBot Secure Location Messaging System

This project allows a TurtleBot to securely send its current location over a network using HMAC-signed UDP messages. It includes:

- A **Sender Script** (`sender.py`) that transmits signed location data
- A **Receiver Script** (`receiver.py`) that listens, verifies, acknowledges, and stores this data in Redis

---

## Sender Setup Guide (`sender.py`)

### 1. Clone the Repository and Navigate to the Directory

```bash
git clone <repository-url>
cd <repository-name>
2. Create and Activate a Python Virtual Environment
bash
Copy
Edit
sudo apt install python3 python3-pip -y
python3 -m venv sender_env
source sender_env/bin/activate
3. Install Required Packages
bash
Copy
Edit
# No external packages required; all used libraries are built into Python
4. Run the Sender Script
bash
Copy
Edit
python3 sender.py
Follow the prompt to input coordinates:

Input numeric x and y values.

The script will:

Create a signed message using HMAC-SHA256.

Send it to a predefined list of target IPs (TARGET_IPS).

Print confirmation or error messages.

You'll be prompted to send another or exit.

Receiver Setup Guide (receiver.py)
1. Clone the Repository and Navigate to the Directory
bash
Copy
Edit
git clone <repository-url>
cd <repository-name>
2. Create and Activate a Python Virtual Environment
bash
Copy
Edit
sudo apt install python3 python3-pip -y
python3 -m venv receiver_env
source receiver_env/bin/activate
3. Install Required Packages
bash
Copy
Edit
pip install redis
4. (Optional) Create a Configuration File
You can override default values by creating a config.json in the same folder:

json
Copy
Edit
{
  "multicast_group": "239.1.1.1",
  "multicast_port": 5005,
  "secret_key": "turtlebot3_secret_key",
  "redis": {
    "host": "localhost",
    "port": 6379
  }
}
If this file is not found or is invalid, default values will be used.

5. Start Redis Server
Make sure Redis is installed and running:

bash
Copy
Edit
redis-server
6. Run the Receiver Script
bash
Copy
Edit
python3 receiver.py
The script will:

Join the specified multicast group and listen for incoming UDP messages.

Verify message integrity using HMAC.

Log valid location messages and store them in Redis with the key format:
turtlebot:<turtlebot_id>

Respond with an "ACK" to the sender.

Log tampered or invalid messages.

Example Redis Output
After a valid message is received, you can check Redis:

bash
Copy
Edit
redis-cli
HGETALL turtlebot:turtlebot_1
Notes
Both sender and receiver must use the same SECRET_KEY for HMAC verification.

Ensure sender and receiver are on the same network/subnet.

If using multicast, some firewalls or routers may require adjustments.

Redis must be running before launching the receiver.

Requirements Summary
Sender
Python 3

No external dependencies

Receiver
Python 3

Redis server

redis Python package

Install Python packages with:

bash
Copy
Edit
pip install redis
License
This project is for academic and demo purposes. Not intended for production environments.

yaml
Copy
Edit

---

You can now copy and paste this whole block into GitHubâ€™s `README.md` or drop it into your project folder direct
