import json
import os
from datetime import datetime
import statistics
import random
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich import print
from rich.traceback import install

# Install rich traceback for better error handling
install()

class WildfireDataLogger:
    def __init__(self, log_directory='wildfire_logs'):
        # Create log directory if it doesn't exist
        self.log_directory = log_directory
        if not os.path.exists(log_directory):
            os.makedirs(log_directory)

        # Initialize console and data structures
        self.console = Console()
        self.incidents = []
        self.log_file_path = os.path.join(log_directory, f'wildfire_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')

    def log_incident(self, location, severity, response_time, area_affected, resources_deployed):
        """Log a new wildfire incident"""
        incident = {
            'timestamp': datetime.now().isoformat(),
            'location': location,
            'severity': severity,
            'response_time': response_time,
            'area_affected': area_affected,
            'resources_deployed': resources_deployed
        }

        self.incidents.append(incident)
        return incident

    def save_log(self):
        """Save incidents to a JSON file"""
        try:
            with open(self.log_file_path, 'w') as f:
                json.dump(self.incidents, f, indent=2)
            self.console.print(f"[bold green]✓ Incidents logged to {self.log_file_path}[/bold green]")
        except Exception as e:
            self.console.print(f"[bold red]✗ Error saving log: {e}[/bold red]")

    def generate_report(self):
        """Generate a comprehensive report of wildfire incidents"""
        if not self.incidents:
            self.console.print("[yellow]⚠ No incidents logged.[/yellow]")
            return

        # Compute statistics
        severities = [incident['severity'] for incident in self.incidents]
        response_times = [incident['response_time'] for incident in self.incidents]
        areas_affected = [incident['area_affected'] for incident in self.incidents]

        # Create a rich table for the report
        report_table = Table(title="Wildfire Incident Report", show_header=True, header_style="bold magenta")
        report_table.add_column("Metric", style="cyan")
        report_table.add_column("Value", style="green")

        # Add statistical insights
        report_table.add_row("Total Incidents", str(len(self.incidents)))
        report_table.add_row("Average Severity", f"{statistics.mean(severities):.2f}")
        report_table.add_row("Highest Severity", str(max(severities)))
        report_table.add_row("Average Response Time", f"{statistics.mean(response_times):.2f} minutes")
        report_table.add_row("Total Area Affected", f"{sum(areas_affected):.2f} sq km")

        # Create a panel with the table and risk assessment
        risk_level = self._assess_risk(statistics.mean(severities), sum(areas_affected))

        # Create a panel that contains the table and risk assessment text
        panel = Panel(
            report_table, 
            subtitle=f"Risk Assessment: {risk_level}", 
            title="Wildfire Incident Analysis", 
            border_style="red" if "HIGH" in risk_level else "yellow"
        )

        # Print the panel
        self.console.print(panel)

        return report_table

    def _assess_risk(self, avg_severity, total_area):
        """Assess overall risk level based on severity and area"""
        if avg_severity > 4 and total_area > 10:
            return "[bold red]HIGH RISK[/bold red]"
        elif avg_severity > 3 and total_area > 5:
            return "[bold yellow]MODERATE RISK[/bold yellow]"
        else:
            return "[bold green]LOW RISK[/bold green]"

    def interactive_logging(self):
        """Interactive mode for logging incidents"""
        while True:
            self.console.print("\n[bold cyan]🔥 WILDFIRE INCIDENT LOGGER 🔥[/bold cyan]")

            # Create a table for menu options
            menu_table = Table(show_header=False, box=None)
            menu_table.add_row("[1]", "Log New Incident")
            menu_table.add_row("[2]", "View Current Logs")
            menu_table.add_row("[3]", "Generate Report")
            menu_table.add_row("[4]", "Save and Exit")

            self.console.print(menu_table)

            choice = Prompt.ask("[green]Select an option[/green]", choices=["1", "2", "3", "4"], default="1")

            try:
                if choice == "1":
                    self._log_new_incident()
                elif choice == "2":
                    self._view_current_logs()
                elif choice == "3":
                    self.generate_report()
                elif choice == "4":
                    if Confirm.ask("[yellow]Are you sure you want to save and exit?[/yellow]"):
                        self.save_log()
                        break
            except Exception as e:
                self.console.print(f"[bold red]An error occurred: {e}[/bold red]")

    def _log_new_incident(self):
        """Guided incident logging with rich prompts"""
        try:
            # Expanded list of locations with more states
            locations = [
                "Yosemite National Park, CA", "Sequoia National Forest, CA", 
                "Mount Hood National Forest, OR", "Crater Lake National Park, OR", 
                "Coconino National Forest, AZ", "Saguaro National Park, AZ",
                "Olympic National Park, WA", "Mount Rainier National Park, WA",
                "Rocky Mountain National Park, CO", "Mesa Verde National Park, CO",
                "Yellowstone National Park, WY", "Grand Teton National Park, WY",
                "Zion National Park, UT", "Bryce Canyon National Park, UT",
                "Sawtooth National Forest, ID", "Craters of the Moon, ID",
                "Everglades National Park, FL", "Ocala National Forest, FL"
            ]

            location = Prompt.ask("Select incident location", choices=locations)

            # Manually handle type conversion for severity
            while True:
                severity_str = Prompt.ask("Enter severity (1-5)")
                try:
                    severity = int(severity_str)
                    if 1 <= severity <= 5:
                        break
                    else:
                        self.console.print("[red]Severity must be between 1 and 5[/red]")
                except ValueError:
                    self.console.print("[red]Please enter a valid integer between 1 and 5[/red]")

            # Similar manual conversion for other numeric inputs
            while True:
                response_time_str = Prompt.ask("Enter response time (minutes)")
                try:
                    response_time = float(response_time_str)
                    break
                except ValueError:
                    self.console.print("[red]Please enter a valid number for response time[/red]")

            while True:
                area_affected_str = Prompt.ask("Enter area affected (square kilometers)")
                try:
                    area_affected = float(area_affected_str)
                    break
                except ValueError:
                    self.console.print("[red]Please enter a valid number for area affected (e.g., 5.5)[/red]")

            while True:
                resources_deployed_str = Prompt.ask("Enter resources deployed")
                try:
                    resources_deployed = int(resources_deployed_str)
                    break
                except ValueError:
                    self.console.print("[red]Please enter a valid integer for resources deployed[/red]")

            incident = self.log_incident(
                location, severity, response_time, 
                area_affected, resources_deployed
            )

            # Display logged incident in a panel
            incident_panel = Panel(
                json.dumps(incident, indent=2), 
                title="[green]Incident Logged Successfully[/green]", 
                border_style="green"
            )
            self.console.print(incident_panel)

        except Exception as e:
            self.console.print(f"[bold red]❌ Error logging incident: {e}[/bold red]")

    def _view_current_logs(self):
        """Display current logged incidents"""
        if not self.incidents:
            self.console.print("[yellow]No incidents logged.[/yellow]")
            return

        # Create a table to display incidents
        log_table = Table(title="Current Wildfire Incidents", show_header=True, header_style="bold magenta")
        log_table.add_column("Location", style="cyan")
        log_table.add_column("Severity", style="red")
        log_table.add_column("Area (sq km)", style="green")
        log_table.add_column("Timestamp", style="blue")

        for incident in self.incidents:
            log_table.add_row(
                str(incident['location']), 
                str(incident['severity']), 
                f"{incident['area_affected']:.2f}", 
                incident['timestamp']
            )

        self.console.print(log_table)

    def generate_mock_data(self, num_incidents=10):
        """Generate mock wildfire incident data for demonstration"""
        locations = [
            "Yosemite National Park, CA", "Sequoia National Forest, CA", 
            "Mount Hood National Forest, OR", "Crater Lake National Park, OR", 
            "Coconino National Forest, AZ", "Saguaro National Park, AZ",
            "Olympic National Park, WA", "Mount Rainier National Park, WA",
            "Rocky Mountain National Park, CO", "Mesa Verde National Park, CO",
            "Yellowstone National Park, WY", "Grand Teton National Park, WY",
            "Zion National Park, UT", "Bryce Canyon National Park, UT",
            "Sawtooth National Forest, ID", "Craters of the Moon, ID",
            "Everglades National Park, FL", "Ocala National Forest, FL"
        ]

        for _ in range(num_incidents):
            self.log_incident(
                location=random.choice(locations),
                severity=random.randint(1, 5),
                response_time=random.uniform(10, 120),
                area_affected=random.uniform(1, 20),
                resources_deployed=random.randint(5, 100)
            )

        self.console.print(f"[green]Generated {num_incidents} mock incidents.[/green]")

def main():
    logger = WildfireDataLogger()
    logger.generate_mock_data()
    logger.interactive_logging()

if __name__ == "__main__":
    main()
